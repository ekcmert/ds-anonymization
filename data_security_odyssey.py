# -*- coding: utf-8 -*-
"""data_security_odyssey.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oFdjl4hHa9nC9tWGRTUaoUHq9BSf7miq

# Data Security Odyssey: The Quest for Anonymity

In the year 2050, data is the most valuable currency—and its protection is paramount. A mysterious cyber-threat is on the horizon, targeting the identities of our valued clients.

**Your mission, should you choose to accept it, is to deploy our three powerful shields:**

- **k-Anonymity:** Hide in the crowd!
- **l-Diversity:** Ensure diversity in your data!
- **t-Closeness:** Keep distributions in balance!

As you progress, you’ll adjust parameters and witness how each method repels the de-anonymization attacks. Prepare for a futuristic journey where every click secures a life!

![Cybersecurity](https://mir-s3-cdn-cf.behance.net/project_modules/fs/bbefa799786133.5efa9bf3d1b49.gif)

---

## Run the code below to initialize the security system. Hurry! We have a lot to do!
"""

# Import necessary libraries
import pandas as pd
import numpy as np
from scipy.stats import entropy
import ipywidgets as widgets
from IPython.display import display, clear_output, HTML
import matplotlib.pyplot as plt

import time
from IPython.display import display, clear_output

import altair as alt  # Import Altair for interactive plotting


def l_attack():
    # Define futuristic colors for l-attack
    ui_title_color = "#AA66CC"  # Subdued futuristic purple
    bar_color = "#AA66CC"

    header = widgets.HTML(
        value=f"<h2 style='color: {ui_title_color}; text-align: left;'>l-Diversity Mechanism Activation</h2>",
        layout=widgets.Layout(width='100%')
    )
    l_slider = widgets.IntSlider(
        value=2, min=1, max=3, step=1, description='l:',
        style={'description_width': 'initial'},
        tooltip="Choose the l-diversity level",
        layout=widgets.Layout(width='100%')
    )

    age_options = df['age'].cat.categories.tolist() + ['*']
    age_dropdown = widgets.Dropdown(
        options=age_options, description='Age:',
        style={'description_width': 'initial'},
        layout=widgets.Layout(width='100%')
    )
    sex_options = df['sex'].cat.categories.tolist() + ['*']
    sex_dropdown = widgets.Dropdown(
        options=sex_options, description='Sex:',
        style={'description_width': 'initial'},
        layout=widgets.Layout(width='100%')
    )
    race_options = df['race'].cat.categories.tolist() + ['*']
    race_dropdown = widgets.Dropdown(
        options=race_options, description='Race:',
        style={'description_width': 'initial'},
        layout=widgets.Layout(width='100%')
    )

    attack_button = widgets.Button(
        description='Run Attack',
        button_style='success',
        layout=widgets.Layout(width='60%', margin='10px 0px')
    )
    attack_button.style.button_color = ui_title_color

    output = widgets.Output(layout={'border': '1px solid gray', 'padding': '10px', 'width': '100%'})

    ui = widgets.VBox([
        header,
        l_slider,
        widgets.HTML(value="<b style='font-size: 14px;'>Attacker's Knowledge:</b>"),
        age_dropdown,
        sex_dropdown,
        race_dropdown,
        attack_button,
        output
    ], layout=widgets.Layout(width='30%', margin='0', align_items='flex-start'))

    display(ui)

    def on_attack_button_clicked(b):
        with output:
            output.clear_output()
            df_anonymized = apply_l_diversity_alternative(df, l_slider.value)
            attacker_knowledge = {
                'age': age_dropdown.value,
                'sex': sex_dropdown.value,
                'race': race_dropdown.value,
            }
            attacker_knowledge = {k: v for k, v in attacker_knowledge.items() if v != '*'}
            victims = de_anonymization_attack(df_anonymized, attacker_knowledge)
            num_victims = len(victims)

            print(f"Number of potential victims: {num_victims}")
            if num_victims > 0 and num_victims <= 112:
                display_columns = quasi_identifiers + [sensitive_attribute]
                display(victims[display_columns])
            elif num_victims > 112:
                print("Too many victims to display.")
            else:
                print("No victims found.")

            if num_victims > 0:
                bar_data = victims[sensitive_attribute].value_counts().reset_index()
                bar_data.columns = ['Income', 'Count']
                total = bar_data['Count'].sum()
                bar_data['Percentage'] = (bar_data['Count'] / total * 100).round(1)
                bar_data['PercentageStr'] = bar_data['Percentage'].astype(str) + "%"

                base = alt.Chart(bar_data).mark_bar(color=bar_color).encode(
                    x=alt.X('Income:N', title="Galactic Income"),
                    y=alt.Y('Count:Q', title="Count"),
                    tooltip=[alt.Tooltip('Income:N'), alt.Tooltip('Count:Q')]
                )
                text = alt.Chart(bar_data).mark_text(
                    dy=-5, color='white', fontSize=12
                ).encode(
                    x='Income:N',
                    y='Count:Q',
                    text=alt.Text('PercentageStr:N')
                )
                final_chart = alt.layer(base, text).properties(
                    title="Sensitive Attribute Distribution",
                    width=300,
                    height=250,
                    background='#333333'
                ).configure_title(
                    fontSize=16,
                    font='Helvetica',
                    anchor='start',
                    color='white'
                ).configure_axis(
                    labelColor='white',
                    titleColor='white'
                ).interactive()

                final_chart.display()

    attack_button.on_click(on_attack_button_clicked)

def t_attack():
    # Define futuristic colors for t-attack
    ui_title_color = "#00AAFF"  # Neon blue
    bar_color = "#00AAFF"

    header = widgets.HTML(
        value=f"<h2 style='color: {ui_title_color}; text-align: left;'>t-Closeness Protocol Activation</h2>",
        layout=widgets.Layout(width='100%')
    )
    t_slider = widgets.FloatSlider(
        value=0.4, min=0.0, max=1.0, step=0.05, description='t:',
        style={'description_width': 'initial'},
        tooltip="Set the maximum allowed distribution difference",
        layout=widgets.Layout(width='100%')
    )

    age_options = df['age'].cat.categories.tolist() + ['*']
    age_dropdown = widgets.Dropdown(
        options=age_options, description='Age:',
        style={'description_width': 'initial'},
        layout=widgets.Layout(width='100%')
    )
    sex_options = df['sex'].cat.categories.tolist() + ['*']
    sex_dropdown = widgets.Dropdown(
        options=sex_options, description='Sex:',
        style={'description_width': 'initial'},
        layout=widgets.Layout(width='100%')
    )
    race_options = df['race'].cat.categories.tolist() + ['*']
    race_dropdown = widgets.Dropdown(
        options=race_options, description='Race:',
        style={'description_width': 'initial'},
        layout=widgets.Layout(width='100%')
    )

    attack_button = widgets.Button(
        description='Run Attack',
        button_style='success',
        layout=widgets.Layout(width='60%', margin='10px 0px')
    )
    attack_button.style.button_color = ui_title_color

    output = widgets.Output(layout={'border': '1px solid gray', 'padding': '10px', 'width': '100%'})

    ui = widgets.VBox([
        header,
        t_slider,
        widgets.HTML(value="<b style='font-size: 14px;'>Attacker's Knowledge:</b>"),
        age_dropdown,
        sex_dropdown,
        race_dropdown,
        attack_button,
        output
    ], layout=widgets.Layout(width='30%', margin='0', align_items='flex-start'))

    display(ui)

    def on_attack_button_clicked(b):
        with output:
            output.clear_output()
            df_anonymized = apply_t_closeness_local(df, t_slider.value)
            attacker_knowledge = {
                'age': age_dropdown.value,
                'sex': sex_dropdown.value,
                'race': race_dropdown.value,
            }
            attacker_knowledge = {k: v for k, v in attacker_knowledge.items() if v != '*'}
            victims = de_anonymization_attack(df_anonymized, attacker_knowledge)
            num_victims = len(victims)

            print(f"Number of potential victims: {num_victims}")
            if num_victims > 0 and num_victims <= 112:
                display_columns = quasi_identifiers + [sensitive_attribute]
                display(victims[display_columns])
            elif num_victims > 112:
                print("Too many victims to display.")
            else:
                print("No victims found.")

            if num_victims > 0:
                bar_data = victims[sensitive_attribute].value_counts().reset_index()
                bar_data.columns = ['Income', 'Count']
                total = bar_data['Count'].sum()
                bar_data['Percentage'] = (bar_data['Count'] / total * 100).round(1)
                bar_data['PercentageStr'] = bar_data['Percentage'].astype(str) + "%"

                base = alt.Chart(bar_data).mark_bar(color=bar_color).encode(
                    x=alt.X('Income:N', title="Galactic Income"),
                    y=alt.Y('Count:Q', title="Count"),
                    tooltip=[alt.Tooltip('Income:N'), alt.Tooltip('Count:Q')]
                )
                text = alt.Chart(bar_data).mark_text(
                    dy=-5, color='white', fontSize=12
                ).encode(
                    x=alt.X('Income:N'),
                    y=alt.Y('Count:Q'),
                    text=alt.Text('PercentageStr:N')
                )
                final_chart = alt.layer(base, text).properties(
                    title="Sensitive Attribute Distribution",
                    width=300,
                    height=250,
                    background='#333333'
                ).configure_title(
                    fontSize=16,
                    font='Helvetica',
                    anchor='start',
                    color='white'
                ).configure_axis(
                    labelColor='white',
                    titleColor='white'
                ).interactive()

                final_chart.display()

    attack_button.on_click(on_attack_button_clicked)

def k_attack():
    # Define futuristic colors for k-attack
    ui_title_color = "#009977"  # A softer teal for the title
    bar_color = "#009977"

    # Define interactive widgets with enhanced styles, layout, and tooltips
    header = widgets.HTML(
        value=f"<h2 style='color: {ui_title_color}; text-align: left;'>k-Anonymity Shield Activation</h2>",
        layout=widgets.Layout(width='100%')
    )
    k_slider = widgets.IntSlider(
        value=15, min=2, max=30, step=1, description='k:',
        style={'description_width': 'initial'},
        tooltip="Choose the size of the anonymity group",
        layout=widgets.Layout(width='100%')
    )

    # Define attacker knowledge widgets (each on its own row)
    age_options = df['age'].cat.categories.tolist() + ['*']
    age_dropdown = widgets.Dropdown(
        options=age_options, description='Age:',
        style={'description_width': 'initial'},
        layout=widgets.Layout(width='100%')
    )
    sex_options = df['sex'].cat.categories.tolist() + ['*']
    sex_dropdown = widgets.Dropdown(
        options=sex_options, description='Sex:',
        style={'description_width': 'initial'},
        layout=widgets.Layout(width='100%')
    )
    race_options = df['race'].cat.categories.tolist() + ['*']
    race_dropdown = widgets.Dropdown(
        options=race_options, description='Race:',
        style={'description_width': 'initial'},
        layout=widgets.Layout(width='100%')
    )

    attack_button = widgets.Button(
        description='Run Attack',
        button_style='success',  # Predefined style; we'll override with custom CSS
        layout=widgets.Layout(width='60%', margin='10px 0px')
    )
    # Set the custom button background (works in many Jupyter environments)
    attack_button.style.button_color = ui_title_color

    output = widgets.Output(layout={'border': '1px solid gray', 'padding': '10px', 'width': '100%'})

    # Arrange the UI vertically (one element per row), aligned to the left.
    ui = widgets.VBox([
        header,
        k_slider,
        widgets.HTML(value="<b style='font-size: 14px;'>Attacker's Knowledge:</b>"),
        age_dropdown,
        sex_dropdown,
        race_dropdown,
        attack_button,
        output
    ], layout=widgets.Layout(width='30%', margin='0', align_items='flex-start'))

    display(ui)

    def on_attack_button_clicked(b):
        with output:
            output.clear_output()
            # Apply k-anonymity using the provided k_slider value
            df_anonymized = apply_k_anonymity(df, k_slider.value)
            attacker_knowledge = {
                'age': age_dropdown.value,
                'sex': sex_dropdown.value,
                'race': race_dropdown.value,
            }
            attacker_knowledge = {k: v for k, v in attacker_knowledge.items() if v != '*'}
            victims = de_anonymization_attack(df_anonymized, attacker_knowledge)
            num_victims = len(victims)

            print(f"Number of potential victims: {num_victims}")
            if num_victims > 0 and num_victims <= 112:
                display_columns = quasi_identifiers + [sensitive_attribute]
                display(victims[display_columns])
            elif num_victims > 112:
                print("Too many victims to display.")
            else:
                print("No victims found.")

            if num_victims > 0:
                # Prepare data for the chart
                bar_data = victims[sensitive_attribute].value_counts().reset_index()
                bar_data.columns = ['Income', 'Count']
                total = bar_data['Count'].sum()
                bar_data['Percentage'] = (bar_data['Count'] / total * 100).round(1)
                # Add a percentage sign
                bar_data['PercentageStr'] = bar_data['Percentage'].astype(str) + "%"

                # Base bar chart
                base = alt.Chart(bar_data).mark_bar(color=bar_color).encode(
                    x=alt.X('Income:N', title="Galactic Income"),
                    y=alt.Y('Count:Q', title="Count"),
                    tooltip=[alt.Tooltip('Income:N'), alt.Tooltip('Count:Q')]
                )
                # Text marks for percentage values
                text = alt.Chart(bar_data).mark_text(
                    dy=-5,  # vertical offset
                    color='white',
                    fontSize=12
                ).encode(
                    x='Income:N',
                    y='Count:Q',
                    text=alt.Text('PercentageStr:N')
                )

                final_chart = alt.layer(base, text).properties(
                    title="Sensitive Attribute Distribution",
                    width=300,
                    height=250,
                    background='#333333'
                ).configure_title(
                    fontSize=16,
                    font='Helvetica',
                    anchor='start',
                    color='white'
                ).configure_axis(
                    labelColor='white',
                    titleColor='white'
                ).interactive()

                alt.renderers.set_embed_options(scaleFactor=2)
                final_chart.display()

    attack_button.on_click(on_attack_button_clicked)


def start_initialization():
  # Create and display the progress bar widget
  progress_bar = widgets.IntProgress(value=0, min=0, max=100, description='Initializing:', bar_style='info')
  display(progress_bar)

  # Update the progress bar over approximately 6 seconds
  for i in range(101):
      progress_bar.value = i
      time.sleep(0.06)  # 0.06 sec per step ~ 6 seconds total

  # Clear the progress bar once done and show a completion message
  clear_output()
  print("Initialization complete! Let's secure some data!")


# Load the dataset
column_names = [
    'age', 'workclass', 'fnlwgt', 'education', 'education-num', 'marital-status',
    'occupation', 'relationship', 'race', 'sex', 'capital-gain', 'capital-loss',
    'hours-per-week', 'native-country', 'income'
]
data_url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data'
df = pd.read_csv(data_url, names=column_names, na_values=' ?')

# Data cleaning and preprocessing
df.dropna(inplace=True)
for col in df.select_dtypes(include=['object']).columns:
    df[col] = df[col].str.strip()
# Define quasi-identifiers and sensitive attribute
quasi_identifiers = ['age', 'sex', 'race']
sensitive_attribute = 'income'

# Generalize quasi-identifiers
df['age'] = pd.cut(
    df['age'],
    bins=[0, 25, 45, 65, 100],
    labels=['Young', 'Adult', 'Senior', 'Elderly']
)

'''df['native-country'] = df['native-country'].apply(
    lambda x: 'US' if x == 'United-States' else 'Non-US'
) '''

# Convert columns to categorical if not already
for col in quasi_identifiers + [sensitive_attribute]:
    df[col] = df[col].astype('category')

# ----------------------------
# ANONYMIZATION FUNCTIONS
# (Do not change these core methods!)
# ----------------------------

def apply_k_anonymity(df, k):
    df_anonymized = df.copy()

    # Add '*' to categories of categorical columns in quasi-identifiers
    for col in quasi_identifiers:
        if df_anonymized[col].dtype.name == 'category':
            if '*' not in df_anonymized[col].cat.categories:
                df_anonymized[col] = df_anonymized[col].cat.add_categories('*')

    grouped = df_anonymized.groupby(quasi_identifiers, observed=True)
    for _, group in grouped:
        if len(group) < k:
            df_anonymized.loc[group.index, quasi_identifiers] = '*'
    return df_anonymized

def apply_l_diversity_alternative(df, l):
    """
    Enforce l-diversity by suppressing the quasi-identifiers in equivalence classes
    that do not meet the l-diversity requirement.
    """
    df_ldiverse = df.copy()
    groups = df_ldiverse.groupby(quasi_identifiers, observed=True)
    for group_key, group in groups:
        if group[sensitive_attribute].nunique() < l:
            for col in quasi_identifiers:
                if df_ldiverse[col].dtype.name == 'category':
                    if '*' not in df_ldiverse[col].cat.categories:
                        df_ldiverse[col] = df_ldiverse[col].cat.add_categories('*')
                df_ldiverse.loc[group.index, col] = '*'
    return df_ldiverse

def total_variation_distance(p, q):
    return np.sum(np.abs(p - q))

def apply_t_closeness_local(df, t):
    """
    Enforce t-closeness by suppressing (local suppression) the quasi-identifiers
    only for those equivalence classes that do not meet the t-closeness requirement.
    """
    df_tclose = df.copy()
    overall_distribution = df[sensitive_attribute].value_counts(normalize=True)
    groups = df_tclose.groupby(quasi_identifiers, observed=True)
    for group_key, group in groups:
        group_distribution = group[sensitive_attribute].value_counts(normalize=True)
        group_distribution = group_distribution.reindex(overall_distribution.index, fill_value=0)
        distance = total_variation_distance(overall_distribution.values, group_distribution.values)
        if distance > t:
            for col in quasi_identifiers:
                if df_tclose[col].dtype.name == 'category':
                    if '*' not in df_tclose[col].cat.categories:
                        df_tclose[col] = df_tclose[col].cat.add_categories('*')
                df_tclose.loc[group.index, col] = '*'
    return df_tclose

def de_anonymization_attack(df_anonymized, attacker_knowledge):
    potential_victims = df_anonymized.copy()
    for key, value in attacker_knowledge.items():
        potential_victims = potential_victims[potential_victims[key] == value]
    return potential_victims


def sensitive_distribution():
    # Prepare the data: Count the occurrences of each income category
    income_data = df['income'].value_counts().reset_index()
    income_data.columns = ['Income', 'Count']
    total = income_data['Count'].sum()
    income_data['Percentage'] = (income_data['Count'] / total * 100).round(1)
    income_data['PercentageStr'] = income_data['Percentage'].astype(str) + "%"

    # Sort the data for consistent stacking
    income_data = income_data.sort_values('Count', ascending=False)

    # Define a blueish sci-fi neon color palette for the pie slices
    color_scale = alt.Scale(
        domain=income_data['Income'].tolist(),
        range=["#0077BE", "#00AAFF", "#00CCFF", "#66E0FF"]  # Blueish neon colors
    )

    # Create a pie chart using mark_arc with a dark stroke for slice separation
    pie_chart = alt.Chart(income_data).mark_arc(innerRadius=50, stroke="#222222").encode(
        theta=alt.Theta(field="Count", type="quantitative"),
        color=alt.Color(field="Income", type="nominal", scale=color_scale,
                        legend=alt.Legend(title="Galactic Income")),
        tooltip=[
            alt.Tooltip("Income:N", title="Income Category"),
            alt.Tooltip("Count:Q", title="Count"),
            alt.Tooltip("Percentage:Q", title="Percentage", format=".1f")
        ]
    )

    # Add text labels to display percentage labels properly positioned
    text = alt.Chart(income_data).mark_text(
        fontSize=14,
        color="white",
        font="Orbitron",
        align="center",  # Align text towards the slice's edge
        baseline="middle"  # Vertically center the text
    ).encode(
        theta=alt.Theta(field="Count", type="quantitative"),  # Text angle based on data
        radius=alt.value(-120),  # Position text further out
        text=alt.Text(field="PercentageStr", type="nominal")
    )
    # Layer the pie chart and text together and configure the overall style
    final_pie = alt.layer(pie_chart, text).properties(
        title="∞ Sensitive Information Distribution ∞",
        width=400,  # Increased width for better clarity
        height=400,  # Increased height for better clarity
        background="#111111"  # Overall chart background
    ).configure_title(
        fontSize=22,
        font="Orbitron",
        color="#00AAFF",      # Neon blue title accent
        anchor="middle"
    ).configure_legend(
        titleFont="Orbitron",
        labelFont="Orbitron",
        titleColor="white",
        labelColor="white"
    ).configure_view(
        fill="#111111",       # Dark drawing area background
        stroke=None
    )

    # Ensure high-resolution rendering and enforce the dark background.
    alt.renderers.set_embed_options(scaleFactor=2, background="#111111")

    final_pie.display()




start_initialization()

"""## Check the Distribution of the Sensitive Information"""

sensitive_distribution()

"""## Simulation 1: Deploying the k-Anonymity Shield

*In this phase, our system groups clients into crowds to hide them within the masses. Adjust the **k** value to see how the shield performs. The attacker’s knowledge is simulated via the dropdown selections.*

Try to protect a target profile (e.g., "Young", "Male", etc.) while minimizing the number of potential victims that an attacker can identify.

---

![Cybersecurity](https://cdnb.artstation.com/p/assets/images/images/015/091/285/original/tanya_-jeglova-image-3.gif?1547025523)
"""

# Run the cell for k-Anonymity Shield Activation
k_attack()

"""## Simulation 2: Activating the l-Diversity Mechanism

*Diversity is strength! Here, we enforce l-diversity so that even if an attacker narrows down an equivalence class, they still face a mix of sensitive attributes.*

Adjust the **l** value and simulate an attack. Can you configure the shield so that the target profile remains well-protected?

---

![Cybersecurity](https://i.gifer.com/origin/cb/cb770bb3930025d6210e7bc34dfc7c89.gif)
"""

# Run the cell for l-Diversity Mechanism Activation
l_attack()

"""## Simulation 3: Engaging the t-Closeness Protocol

*Balance is key. With t-Closeness, our shield ensures that the distribution of sensitive attributes in each group stays close to the overall distribution, confusing any potential attacker.*

Adjust the **t** threshold to secure your target profile. Can you achieve the perfect equilibrium?

---

![Cybersecurity](https://i.pinimg.com/originals/5c/99/d8/5c99d8996c468b3e5b30e2f7ca22206a.gif)
"""

# Run the cell for t-Closeness Protocol Activation
t_attack()